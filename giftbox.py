import telebot
from threading import Timer
import re
from config import BEARER_TOKEN
from main import send_message


# Initialize your Telegram bot
bot = telebot.TeleBot(BEARER_TOKEN)

# Define the function to handle user input during gift box sign-up
def sign_up_for_gift_box(message):
    # Send the initial message to the user
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤—ñ—Ç! –©–æ–± –æ—Ñ–æ—Ä–º–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É –Ω–∞ –ø–æ–¥–∞—Ä—É–Ω–∫–æ–≤—É –∫–æ—Ä–æ–±–∫—É, –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è, –±—É–¥—å –ª–∞—Å–∫–∞, —Å–≤–æ—ó–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É.")
    # Set a timer for 3 minutes to send a reminder if the user hasn't responded
    Timer(180, send_reminder, args=[message.chat.id]).start()
    # Set the state to expect phone number input next
    bot.register_next_step_handler(message, process_phone_number)

# Function to send a reminder after 3 minutes
def send_reminder(chat_id):
    bot.send_message(chat_id, "–ó–¥–∞—î—Ç—å—Å—è, —â–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü—Ä–æ–¥–æ–≤–∂–∏–º–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –ø—ñ–¥–ø–∏—Å–∫–∏? üéÅ –ü–æ–¥—ñ–ª—ñ—Ç—å—Å—è, –±—É–¥—å –ª–∞—Å–∫–∞, —Å–≤–æ—ó–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É.")
    # Schedule another reminder after 2 hours if the user still hasn't responded
    Timer(7200, send_two_hour_reminder, args=[chat_id]).start()

# Function to send a reminder after 2 hours
def send_two_hour_reminder(chat_id):
    bot.send_message(chat_id, "–í–∏ –∑–∞–±—É–ª–∏ –ø—Ä–æ –ø—ñ–¥–ø–∏—Å–∫—É? ü•∫ –ó—Ä–æ–±—ñ—Ç—å —É—Å—å–æ–≥–æ –¥–µ–∫—ñ–ª—å–∫–∞ –∫–ª—ñ–∫—ñ–≤ —ñ –º–∏ –ø–æ—á–Ω–µ–º–æ –∑–±–∏—Ä–∞—Ç–∏ –¥–ª—è –≤–∞—Å —Å–µ–∫—Ä–µ—Ç–Ω–∏–π –±–æ–∫—Å!")
    # Schedule the final message after an additional time
    Timer(7200, send_final_message, args=[chat_id]).start()

# Function to send the final message
def send_final_message(chat_id):
    bot.send_message(chat_id, "–ú–∏ –±—ñ–ª—å—à–µ –Ω–µ –±—É–¥–µ–º–æ —Ç—É—Ä–±—É–≤–∞—Ç–∏ –≤–∞—Å –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è–º–∏, –ø—Ä–æ—Ç–µ —ñ–∑ –Ω–µ—Ç–µ—Ä–ø—ñ–Ω–Ω—è–º —á–µ–∫–∞—Ç–∏–º–µ–º–æ –≤–∞—à–æ–≥–æ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è. –ó–∞–≤–∂–¥–∏ —Ç—É—Ç üíû")

# Function to handle phone number input
def process_phone_number(message):
    # Save the phone number from the user's message
    phone_number = message.text
    # Validate the phone number (not implemented here)
    # If the phone number is valid, proceed to ask for the recipient's name
    bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä, –±—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å —Å–≤–æ—î —ñ–º'—è.")
    # Set the state to expect name input next
    bot.register_next_step_handler(message, process_name)

# Function to handle name input
def process_name(message):
    # Save the first name from the user's message
    first_name = message.text
    # Prompt the user for their last name
    bot.send_message(message.chat.id, "–ê —Ç–∞–∫–æ–∂ –ø—Ä—ñ–∑–≤–∏—â–µ.")
    # Set the state to expect last name input next
    bot.register_next_step_handler(message, process_last_name, first_name)

# Function to handle last name input
def process_last_name(message, first_name):
    # Save the last name from the user's message
    last_name = message.text
    # Prompt the user for their address
    bot.send_message(message.chat.id, "–©–æ–± –º–∏ –º–æ–≥–ª–∏ –¥–æ—Å—Ç–∞–≤–∏—Ç–∏ –±–æ–∫—Å –ù–æ–≤–æ—é –ø–æ—à—Ç–æ—é, –Ω–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–∞ –≤–∞—à–∞ –∞–¥—Ä–µ—Å–∞.\n\n–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å –Ω–∞—Å–µ–ª–µ–Ω–∏–π –ø—É–Ω–∫—Ç üëáüèª")
    # Set the state to expect address input next
    bot.register_next_step_handler(message, process_address, first_name, last_name)

# Function to handle address input
def process_address(message, first_name, last_name):
    # Save the address from the user's message
    address = message.text
    # Prompt the user for the first payment
    bot.send_message(message.chat.id, "–í–∂–µ –º–∞–π–∂–µ –≤—Å–µ üôÉ –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –ø—ñ–¥–ø–∏—Å–∫–∏ –∑–¥—ñ–π—Å–Ω—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —Å–≤–æ—é –ø–µ—Ä—à—É –æ–ø–ª–∞—Ç—É")
    # Set the state to expect payment confirmation next
    bot.register_next_step_handler(message, process_payment_confirmation, first_name, last_name, address)

# Function to handle payment confirmation
def process_payment_confirmation(message, first_name, last_name, address):
    # Proceed to confirm the subscription
    bot.send_message(message.chat.id, f"–î—è–∫—É—î–º–æ, {first_name} {last_name}! –í–∏ —É—Å–ø—ñ—à–Ω–æ –ø—ñ–¥–ø–∏—Å–∞–ª–∏—Å—è –Ω–∞ –ø–æ–¥–∞—Ä—É–Ω–∫–æ–≤—É –∫–æ—Ä–æ–±–∫—É!")

